@model FinancialSummaryViewModel

@{
    ViewData["Title"] = "Quarterly Financial Report";
}

<div class="container-fluid mt-4">
    <!-- Report Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Quarterly Financial Report - @Model.Period</h4>
                    <div>
                        <button class="btn btn-sm btn-light" onclick="window.print()">
                            <i class="fas fa-print"></i> Print
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card shadow border-success">
                <div class="card-body">
                    <h5 class="card-title text-success">Quarterly Income</h5>
                    <h2>@Model.TotalIncome.ToString("C")</h2>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow border-danger">
                <div class="card-body">
                    <h5 class="card-title text-danger">Quarterly Expenses</h5>
                    <h2>@Model.TotalExpenses.ToString("C")</h2>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow @(Model.NetIncome >= 0 ? "border-success" : "border-danger")">
                <div class="card-body">
                    <h5 class="card-title @(Model.NetIncome >= 0 ? "text-success" : "text-danger")">Net Income</h5>
                    <h2 class="@(Model.NetIncome >= 0 ? "text-success" : "text-danger")">
                        @Model.NetIncome.ToString("C")
                    </h2>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="card-title mb-0">Monthly Trend</h5>
                </div>
                <div class="card-body">
                    <canvas id="monthlyTrendChart" height="300"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="card-title mb-0">Category Distribution</h5>
                </div>
                <div class="card-body">
                    <canvas id="categoryChart" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Category Table -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header">
                    <h5 class="card-title mb-0">Category Summary</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Category</th>
                                    <th class="text-end">Amount</th>
                                    <th class="text-end">Percentage</th>
                                    <th class="text-center">Trend</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var category in Model.CategoryTotals.OrderByDescending(c => c.Value))
                                {
                                    <tr>
                                        <td>@category.Key</td>
                                        <td class="text-end">@category.Value.ToString("C")</td>
                                        <td class="text-end">
                                            @(Model.CategoryPercentages.ContainsKey(category.Key)
                                                ? Model.CategoryPercentages[category.Key].ToString("F1") + "%"
                                                : "0%")
                                        </td>
                                        <td class="text-center">
                                            @{
                                                var percentage = Model.CategoryPercentages[category.Key];
                                                if (percentage > 33.33m)
                                                {
                                                    <i class="fas fa-arrow-up text-danger"></i>
                                                }
                                                else if (percentage < 33.33m)
                                                {
                                                    <i class="fas fa-arrow-down text-success"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-arrows-alt-h text-warning"></i>
                                                }
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Initialize monthly trend chart
        const monthlyCtx = document.getElementById('monthlyTrendChart').getContext('2d');
        new Chart(monthlyCtx, {
            type: 'line',
            data: {
                labels: @Json.Serialize(Model.MonthlyTotals.Keys),
                datasets: [{
                    label: 'Net Income',
                    data: @Json.Serialize(Model.MonthlyTotals.Values),
                    borderColor: '#4BC0C0',
                    tension: 0.1,
                    fill: false
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Initialize category pie chart
        const categoryCtx = document.getElementById('categoryChart').getContext('2d');
        new Chart(categoryCtx, {
            type: 'pie',
            data: {
                labels: @Json.Serialize(Model.CategoryTotals.Keys),
                datasets: [{
                    data: @Json.Serialize(Model.CategoryTotals.Values),
                    backgroundColor: [
                        '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',
                        '#FF9F40', '#4BC0C0', '#FF6384', '#36A2EB', '#FFCE56'
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'right'
                    }
                }
            }
        });
    </script>
}