@model ReportFilterViewModel

@{
    ViewData["Title"] = "Financial Reports";
}

<div class="container-fluid mt-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="card-title mb-0">Financial Reports</h4>
                </div>
                <div class="card-body">
                    <form id="reportForm" class="row g-3">
                        <div class="col-md-4">
                            <label asp-for="StartDate" class="form-label"></label>
                            <input asp-for="StartDate" class="form-control" type="date" />
                        </div>
                        <div class="col-md-4">
                            <label asp-for="EndDate" class="form-label"></label>
                            <input asp-for="EndDate" class="form-control" type="date" />
                        </div>
                        <div class="col-md-4">
                            <label asp-for="CategoryId" class="form-label"></label>
                            <select asp-for="CategoryId" class="form-select"
                                    asp-items="@(new SelectList(Model.Categories, "CategoryId", "Name"))">
                                <option value="">All Categories</option>
                            </select>
                        </div>
                        <div class="col-12">
                            <div class="btn-group">
                                <button type="button" class="btn btn-primary" onclick="generateReport('financialSummary')">
                                    <i class="fas fa-chart-pie"></i> Financial Summary
                                </button>
                                <button type="button" class="btn btn-success" onclick="generateReport('cashFlow')">
                                    <i class="fas fa-chart-line"></i> Cash Flow
                                </button>
                                <button type="button" class="btn btn-info" onclick="generateReport('budgetAnalysis')">
                                    <i class="fas fa-wallet"></i> Budget Analysis
                                </button>
                            </div>
                            <div class="btn-group ms-2">
                                <button type="button" class="btn btn-outline-primary" onclick="downloadReport('pdf')">
                                    <i class="fas fa-file-pdf"></i> Export PDF
                                </button>
                                <button type="button" class="btn btn-outline-success" onclick="downloadReport('excel')">
                                    <i class="fas fa-file-excel"></i> Export Excel
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Report Content Area -->
    <div id="reportContent">
        <!-- Will be populated with the selected report -->
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let currentCharts = [];

        function generateReport(reportType) {
            const formData = new FormData(document.getElementById('reportForm'));
            formData.append('reportType', reportType);

            $.get(`/Reports/${reportType}`, formData, function(response) {
                $('#reportContent').html(response);
                initializeCharts();
            });
        }

        function downloadReport(format) {
            const formData = new FormData(document.getElementById('reportForm'));
            const queryString = new URLSearchParams(formData).toString();

            window.location.href = `/Reports/Download?format=${format}&${queryString}`;
        }

        function initializeCharts() {
            // Cleanup existing charts
            currentCharts.forEach(chart => chart.destroy());
            currentCharts = [];

            // Initialize new charts if they exist
            const chartCanvases = document.querySelectorAll('[data-chart]');
            chartCanvases.forEach(canvas => {
                const chartData = JSON.parse(canvas.dataset.chartData);
                const chartType = canvas.dataset.chart;
                const chart = new Chart(canvas, {
                    type: chartType,
                    data: chartData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false
                    }
                });
                currentCharts.push(chart);
            });
        }

        // Initialize with financial summary
        $(document).ready(function() {
            generateReport('financialSummary');
        });
    </script>
}